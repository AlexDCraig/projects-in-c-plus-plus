#include "BlueMen.h"
#include "Player.h"
#include "Card.h"
#include "Deck.h"
#include "Requests.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

BlueMen::BlueMen()
{
	identity = "BlueMen";
}

Card BlueMen::lookBack()
{
	vector <Requests> successPile; // need only concern himself with the requests previously that were successful because that means someone has it
	vector <Requests> compilation; // to put data back into the queue

	for (int k = 0; k < (playerRequests->currentSize / 2); k++)
	{
		Requests placeholder = playerRequests->dequeue(); 
		
		if (placeholder.success == true)
		{
			successPile.push_back(placeholder);
		}

		compilation.push_back(placeholder);
	}		
	
	// sort both vectors by recency
	reverse(successPile.begin(), successPile.end());
	reverse(compilation.begin(), compilation.end());

	Requests successRequest = successPile.at(0); // the most recent card requested successfully
	for (int j = 0; j < compilation.size(); j++)
	{
		playerRequests->enqueue(compilation.at(j));
	}

	Card successCard;
	successCard.rank = successRequest.rank;
	successCard.suit = successRequest.suit;

	return successCard;
}

bool BlueMen::checkForPairs()
{
	current.sortHand(); // put the cards in order

	bool found = false;

	int counter = 0;

if (current.getHandSize() >= 4) // must have at least four cards for this function
{

	for (int k = current.getHandSize() - 1; k > 0; k--) // First, look for four pair.
	{
		Card card1 = current.cards.at(k);
		Card card2 = current.cards.at(k - 1);

		if (pairCheckerHelper(card1, card2) == true)
			counter++;
			
		else
			counter = 0;

		if (counter == 4)
		{
			found = true;
			pairs.push_back(card1); // doesn't matter which card
			announceRemoval();			
			
			for (int r = (k - 1); r <= (k + 2); r++) // start at the fourth match and move upwards into the first card that was a match
			{
				current.cards.erase(current.cards.begin() + (r - 1));
			}
		}
	}
}


if (current.getHandSize() >= 3) // they have to have at least three cards
{
		for (int k = current.getHandSize() - 1; k > 0; k--) // Next look for pairs of three
		{
			Card card1 = current.cards.at(k);
			Card card2 = current.cards.at(k - 1);

			if (pairCheckerHelper(card1, card2) == true)
			{
				Card card3 = current.cards.at(k - 2);
				
				if (pairCheckerHelper(card2, card3) == true)
				{
					cout << "When the BlueMen says he got four of a kind in this case, he's lying: he only had three plus a fake." << endl;
					found = true;
					pairs.push_back(card1);
					announceRemoval();
					
					for (int g = (k - 1); g <= (k + 1); g++)
					{
						current.cards.erase(current.cards.begin() + (g - 1));
					}
				}
			}
		}
	

}
		
		return found;

}
