#include "Player.h"
#include "Creature.h"
#include "LineupQueue.h"
#include <iostream>
#include <time.h>
#include <string>
using namespace std;

Player::Player(int num, string team)
{
	rosterSize = num;
	teamName = team;
	srand(time(0));
	
}

Player::~Player()
{
	roster->deleteAll(); // uses lineupqueue's deleteAll function to erase all data for each member
	winners->deleteAll();
	losers->deleteAll();
}

void Player::fillRoster()
{
	roster = new LineupQueue;

	//fortesting
	Creature* g1 = new Gollum;
	g1->setName("gollum1");
	Creature* g2 = new Gollum;
	g2->setName("gollum2");
	Creature* g3 = new Gollum;
	g3->setName("gollum3");
	Creature* g4 = new Gollum;
	g4->setName("gollum4");
	Creature* g5 = new Gollum;
	g5->setName("gollum5");
	Creature* g6 = new Gollum;
	g6->setName("gollum6");
	Creature* g7 = new Gollum;
	g7->setName("gollum7");
	Creature* g8 = new Gollum;
	g8->setName("gollum8");
	
	roster->enqueue(g1);
	roster->enqueue(g2);
	roster->enqueue(g3);
	roster->enqueue(g4);
	roster->enqueue(g5);
	roster->enqueue(g6);
	roster->enqueue(g7);
	roster->enqueue(g8);

	/*cout << "There are the following creature types: Gollum, Barbarian, ReptilePeople, BlueMen, Hydra." << endl;
	
	cout << endl << "Please enter the creatures you would like for your team. The first creature you select will be the first creature to fight, the second creature will be the second to fight, and so on." << endl;

	for (int k = 0; k < rosterSize; k++)
	{
		cout << "For roster slot " << k + 1 << ":" << endl;
		string user;
		cin >> user;
		
		if (user == "Gollum" || user == "gollum")
			{
				Creature* g1 = new Gollum;
				cout << "Please assign it a unique name." << endl;
				string uniq;
				cin >> uniq;
				g1->setName(uniq);
				roster->enqueue(g1);
			}

		else if (user == "Barbarian" || user == "barbarian")
			{
				Creature* b1 = new Barbarian;
				cout << "Please assign it a unique name." << endl;
				string uniq;
				cin >> uniq;
				b1->setName(uniq);
				roster->enqueue(b1);
			}

		else if (user == "ReptilePeople" || user == "Reptilepeople" || user == "reptilepeople" || user == "reptilePeople")
			{
				Creature* r1 = new ReptilePeople;
			        cout << "Please assign it a unique name." << endl;
				string uniq;
				cin >> uniq;
				r1->setName(uniq);	
				roster->enqueue(r1);
			}

		else if (user == "BlueMen" || user == "Bluemen" || user == "bluemen" || user == "blueMen")
			{
				Creature* bm1 = new BlueMen;
				cout << "Assign it a unique name." << endl;
				string uniq;
				cin >> uniq;
				bm1->setName(uniq);
				roster->enqueue(bm1);
			}

		else if (user == "Hydra" || user == "hydra")
			{
				Creature* h1 = new Hydra;
				cout << "Give it a unique name." << endl;
				string uniq;
				cin >> uniq;
				h1->setName(uniq);
				roster->enqueue(h1);
			}

		else
		{
			cout << "ERROR: Invalid input." << endl;
			this->fillRoster();
		}


	}*/
}

void Player::battle(Player* p2)
{
	this->winners = new LineupQueue;
	this->losers = new LineupQueue;
	p2->winners = new LineupQueue;
	p2->losers = new LineupQueue;
	fullList = new StandingsStack;

	int counter = 1;

	for (int k = 0; k < rosterSize; k++) // both players have the same # of creatures. pair each creature up, see who wins, see who loses
	{
		Creature* play1 = this->roster->dequeue(); // pop off the first creature from the queue
		Creature* play2 = p2->roster->dequeue();
			
		while (play1->getStrengthPoints() > 0 && play2->getStrengthPoints() > 0)

		{	
			cout << "------ ROUND " << counter << " ------" << endl;

			
			play1->attackCreature(play2);
			play2->attackCreature(play1);
				
			counter++;
		}	

		if (play1->getStrengthPoints() == 0) // ASSUMES BOTH PLAYERS CANNOT DIE. If player1's creature dies, add that creature to the losers queue,
		// and add player2's creature to the winners queue
		{
			this->losers->enqueue(play1);
			fullList->push(play1);
			p2->winners->enqueue(play2);
		}

		else if (play2->getStrengthPoints() == 0)
		{
			p2->losers->enqueue(play2);
			fullList->push(play2);
			this->winners->enqueue(play1);
		}		

	}

	this->printWinners();
	this->printLosers();
	p2->printWinners();
	p2->printLosers();
}

LineupQueue* Player::winnersBracket(Player *p2) // pass other player's loser's bracket
{
	LineupQueue* topthree = new LineupQueue;
	
	cout << endl << "------ WINNER'S BRACKET ------" << endl;

	if (this->winners->checkEmpty() == true)
		{
			cout << this->getTeamName() << "  had no winners." << endl;
			// so all of the other team's winners are the top competitors
			//int counter = 0;
			
			while (p2->winners->checkEmpty() != true)
				{
					Creature* c1 = p2->winners->dequeue();
					topthree->enqueue(c1);
					//counter++;
				}	
			return topthree;
		}
			
		if (p2->winners->checkEmpty() == true)
		{
			cout << p2->getTeamName() << " had no winners." <<  endl;
		
			//int counter = 0;

			while (this->winners->checkEmpty() != true)
				{
					Creature* c1 = this->winners->dequeue();
					topthree->enqueue(c1);
					//counter++;
				}

			/*while (this->winners->checkEmpty() != true)
				{
					Creature* c1 = this->winners->dequeue();
					fullList->push(c1);
				}*/
			
			return topthree;
		}

	while (this->winners->checkEmpty() != true && p2->winners->checkEmpty() != true)
	{
		Creature* play1 = this->winners->dequeue(); // pop off the first creature from the queue
		Creature* play2 = p2->winners->dequeue();
		int gameCounter = 1;

		cout << "GAME " << gameCounter << ": " << play1->getName() << " of the " << this->getTeamName() << " vs. " << play2->getName() << " of the " << p2->getTeamName() << endl;

		int roundCounter = 1;	

		while (play1->getStrengthPoints() > 0 && play2->getStrengthPoints() > 0) // fight until one dies
		{

			cout << "------ ROUND " << roundCounter << " ------" << endl;

		
			play1->attackCreature(play2);
			play2->attackCreature(play1);
			
			roundCounter++;	
		}

		if (play1->getStrengthPoints() == 0) // ASSUMES BOTH PLAYERS CANNOT DIE. If player1's creature dies, add that creature to the losers queue,
		// and add player2's creature to the winners queue
		{
			fullList->push(play1);
			p2->winners->enqueue(play2);
		}

		else if (play2->getStrengthPoints() == 0)
		{
			fullList->push(play2);
			this->winners->enqueue(play1);
		}		

		gameCounter++;	

	}

	// if there remains other winners in a team's roster, add them to the winner pile. winners don't fight each other
	while (this->winners->checkEmpty() == false)
	{
		Creature* c1 = this->winners->dequeue();
		topthree->enqueue(c1);
	}

	while (p2->winners->checkEmpty() == false)
	{
		Creature* c2 = p2->winners->dequeue();
		topthree->enqueue(c2);
	}	

	return topthree;
}

void Player::printRoster()
{
	if (roster->first != NULL)
	{
		cout << "*****Team " << teamName << " has the roster: *****" << endl;
		roster->printQueue();
	}
}

void Player::printWinners()
{
	if (winners->first != NULL)
	{
		cout << "*****Team " << teamName << " have the winners: *****" << endl;	
		winners->printQueue();
	}
}

void Player::printLosers()
{
	if (losers->first != NULL)
	{
		cout << "*****Team " << teamName << " have the losers: *****" << endl;
		losers->printQueue();
	}
}	

string Player::getTeamName()
{
	return teamName;
}

void Player::printStack()
{
	fullList->printList();
}


